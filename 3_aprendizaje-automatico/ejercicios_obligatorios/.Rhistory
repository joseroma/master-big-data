y_train = train_df$A16
x_test = test_df[,predictors]
y_test = test_df$A16
# Para procesar en paralelo
registerDoParallel(cores=4)
# Entrenamos los modelos Cross Validation
cvfit_lasso = cv.glmnet(data.matrix(x_train), as.matrix(y_train), family = "binomial", alpha = 1, parallel = TRUE, type.measure='auc')
# Imprimimos el AUC para los diferentes alphas
plot(cvfit_lasso)
rocplot <- function(pred, truth, ...) {
predob = prediction(pred, truth)
perf = performance(predob, "tpr", "fpr")
plot(perf, ...)
roc <- roc(pred, truth, auc=TRUE)
area <- auc(roc)
area <- format(round(area, 4), nsmall = 4)
text(x=0.8, y=0.1, labels = paste("AUC =", area))
# the reference x=y line
segments(x0=0, y0=0, x1=1, y1=1, col="gray", lty=2)
}
# Extraemos las predicciones
pred_lasso = predict(cvfit_lasso, newx = data.matrix(x_test), s = "lambda.min", type = "class")
# Extraemos métricas generales
confusionMatrix(as.factor(pred_lasso), as.factor(y_test), positive="1")
# Extraemos AUC
rocplot(as.numeric(pred_lasso), y_test,col="blue")
# Entrenamos los modelos Cross Validation
cvfit_ridge = cv.glmnet(data.matrix(x_train), as.matrix(y_train), family = "binomial", alpha = 0, parallel=TRUE, standardize=TRUE)
# Imprimimos el AUC para los diferentes alphas
plot(cvfit_ridge)
# Obtenemos la predicción
pred_ridge = predict(cvfit_ridge, newx = data.matrix(x_test), s = "lambda.min", type = "class", type.measur='auc')
# Extraemos métricas generales
confusionMatrix(as.factor(pred_ridge), as.factor(y_test), positive="1")
# Extraemos AUC
rocplot(as.numeric(pred_ridge), y_test,col="blue")
as.matrix(coef(cvfit_lasso, s = cvfit_lasso$lambda.1se))
as.matrix(coef(cvfit_ridge, s = cvfit_ridge$lambda.1se))
m <- confusionMatrix(as.factor(pred_lasso), as.factor(y_test), positive="1")
m
m["Accuracy"]
m
m[1]
m$table
m$table[[1]]
m
m$table[[4]]
m
m$table[[3]]
m$table[[2]]
m
m_lasso <- confusionMatrix(as.factor(pred_lasso), as.factor(y_test), positive="1")
cat("Valor monetario que generará el modelo: " + (m_lasso$table[[4]]*100)-(m_lasso$table[[2]]*20))
m_lasso <- confusionMatrix(as.factor(pred_lasso), as.factor(y_test), positive="1")
cat(c("Valor monetario que generará el modelo: ", (m_lasso$table[[4]]*100)-(m_lasso$table[[2]]*20), " €"))
cat(c("Valor monetario que generará el modelo: ", (m_lasso$table[[4]]*100)-(m_lasso$table[[2]]*20), "€"))
m_ridge <- confusionMatrix(as.factor(pred_ridge), as.factor(y_test), positive="1")
cat(c("Valor monetario que generará el modelo de Ridge es de: ", (m_ridge$table[[4]]*100)-(m_ridge$table[[2]]*20), "€"))
m_lasso <- confusionMatrix(as.factor(pred_lasso), as.factor(y_test), positive="1")
cat(c("Valor monetario que generará el modelo de Lasso es de: ", (m_lasso$table[[4]]*100)-(m_lasso$table[[2]]*20), "€"))
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
fit<-lm(mpg~.,data=auto)
summary(fit)
fit2<-lm(mpg~cylinders+horsepower+weight+model_year,data=auto)
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(readr)
library (Hmisc)
library(corrplot)
library(caret)
library(plyr)
library(GGally)
library(skimr)
library(ggplot2)
auto <- read_csv("datos/auto.csv", na = "?")
skim(auto)
summary(auto)
ggpairs(auto)
auto$origin<-as.factor(auto$origin)
auto$cylinders<-as.factor(auto$cylinders)
auto$model_year<-as.factor(auto$model_year)
ggplot(auto, aes(mpg,fill=cylinders))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=model_year))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=origin))+geom_histogram(binwidth=1)
par(mfrow = c(4, 2))
hist(as.numeric(auto$cylinders), main = "Cylinders histogram",  xlab = "cylinders")
hist(auto$displacement, main = "Displacement histogram",  xlab = "displacement")
hist(auto$horsepower, main = "Horsepowe histogram",  xlab = "horsepower")
hist(auto$weight, main = "Weight histogram",  xlab = "weight")
hist(auto$acceleration, main = "Acceleration histogram",  xlab = "acceleration")
hist(as.numeric(auto$model_year), main = "Model year histogram",  xlab = "model_year")
hist(as.numeric(auto$origin), main = "Origin histogram",  xlab = "origin")
hist(auto$mpg, main = "MPG histogram",  xlab = "mpg")
normalizados <- preProcess(auto, method = "range")
auto<-predict(normalizados, auto)
boxplot(auto[,c( "displacement", "horsepower","weight","acceleration", "mpg")])
fit<-lm(mpg~.,data=auto)
summary(fit)
View(auto)
fit2<-lm(mpg~cylinders+horsepower+weight+model_year+origin,data=auto)
summary(fit2)
fit3<-lm(mpg~cylinders+horsepower+weight+model_year+origin+I(horsepower^2)+I(weight^2),data=auto)
summary(fit3)
setwd("~/Documentos/Bitbucket/master-big-data/3_aprendizaje-automatico/ejercicios_obligatorios")
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
skim(auto)
crime_data <- read_csv("datos/crime_data.csv")
library(readr)
library (Hmisc)
library(corrplot)
library(caret)
library(plyr)
library(GGally)
library(skimr)
library(ggplot2)
auto <- read_csv("datos/auto.csv")
skim(auto)
crime_data <- read_csv("datos/crime_data.csv")
skim(auto)
skim(crime_data)
View(crime_data)
install.packages("cluster")
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(cluster)
install.packages("factoextra")
install.packages("curl")
install.packages("libcurl")
library(factoextra)
install.packages("factoextra")
crime_data <- scale(crime_data)
crime_data <- read_csv("datos/crime_data.csv")
skim(crime_data)
crime_data <- scale(crime_data)
crime_data <- scale(crime_data)
crime_data_ <- scale(crime_data["Murder", "Assault", "UrbanPop", "Rape"])
install.packages("dplyr")
library(dplyr)
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
head(crime_data_,n=5)
crime_data_$rownames <- crime_data %>% select("State")
head(crime_data_,n=5)
rownames(crime_data_) <- crime_data %>% select("State")
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
rownames(crime_data_) <- crime_data %>% select("State")
crime_data_
row.names(crime_data_) <- crime_data %>% select("State")
rownames(crime_data_)
row.names(crime_data_)
row.names(crime_data)
cbind(crime_data$State, crime_data)
cbind(crime_data$State, crime_data_)
cbind(State = crime_data$State, crime_data_)
head(crime_data,n=5)
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
crime_data <- cbind(State = crime_data$State, crime_data_)
head(crime_data,n=5)
head(data.frame(crime_data),n=5)
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(readr)
library (Hmisc)
library(corrplot)
library(caret)
library(plyr)
library(GGally)
library(skimr)
library(ggplot2)
library(cluster)
library(dplyr)
auto <- read_csv("datos/auto.csv")
skim(auto)
summary(auto)
ggpairs(auto)
auto$origin<-as.factor(auto$origin)
auto$cylinders<-as.factor(auto$cylinders)
auto$model_year<-as.factor(auto$model_year)
ggplot(auto, aes(mpg,fill=cylinders))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=model_year))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=origin))+geom_histogram(binwidth=1)
par(mfrow = c(4, 2))
hist(as.numeric(auto$cylinders), main = "Cylinders histogram",  xlab = "cylinders")
hist(auto$displacement, main = "Displacement histogram",  xlab = "displacement")
hist(auto$horsepower, main = "Horsepowe histogram",  xlab = "horsepower")
hist(auto$weight, main = "Weight histogram",  xlab = "weight")
hist(auto$acceleration, main = "Acceleration histogram",  xlab = "acceleration")
hist(as.numeric(auto$model_year), main = "Model year histogram",  xlab = "model_year")
hist(as.numeric(auto$origin), main = "Origin histogram",  xlab = "origin")
hist(auto$mpg, main = "MPG histogram",  xlab = "mpg")
normalizados <- preProcess(auto, method = "range")
auto<-predict(normalizados, auto)
boxplot(auto[,c( "displacement", "horsepower","weight","acceleration", "mpg")])
fit<-lm(mpg~.,data=auto)
summary(fit)
fit2<-lm(mpg~cylinders+horsepower+weight+model_year+origin,data=auto)
summary(fit2)
fit3<-lm(mpg~cylinders+horsepower+weight+model_year+origin+I(horsepower^2)+I(weight^2),data=auto)
summary(fit3)
crime_data <- read_csv("datos/crime_data.csv")
skim(crime_data)
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
crime_data_scaled <- data.frame(cbind(State = crime_data$State, crime_data_))
head(crime_data_scaled,n=5)
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = 'wss') + geom_vline(xintercept = 4, linetype=5, col= "darkred")
install.packages("factoextra")
install.packages("curl")
install.packages("curl")
install.packages("factoextra")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = 'wss') + geom_vline(xintercept = 4, linetype=5, col= "darkred")
library(factoextra)
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = 'wss') + geom_vline(xintercept = 4, linetype=5, col= "darkred")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette", "wss", "gap_stat")) + geom_vline(xintercept = 4, linetype=5, col= "darkred")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 4, linetype=5, col= "darkred")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline( linetype=5, col= "darkred")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette"))
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("wss")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Elbow method")
fviz_nbclust(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("gap_stat")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Gap statistic method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("wss")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Elbow method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("gap_stat")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Gap statistic method")
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(readr)
library (Hmisc)
library(corrplot)
library(caret)
library(plyr)
library(GGally)
library(skimr)
library(ggplot2)
library(cluster)
library(dplyr)
library(factoextra)
auto <- read_csv("datos/auto.csv")
skim(auto)
summary(auto)
ggpairs(auto)
auto$origin<-as.factor(auto$origin)
auto$cylinders<-as.factor(auto$cylinders)
auto$model_year<-as.factor(auto$model_year)
ggplot(auto, aes(mpg,fill=cylinders))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=model_year))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=origin))+geom_histogram(binwidth=1)
par(mfrow = c(4, 2))
hist(as.numeric(auto$cylinders), main = "Cylinders histogram",  xlab = "cylinders")
hist(auto$displacement, main = "Displacement histogram",  xlab = "displacement")
hist(auto$horsepower, main = "Horsepowe histogram",  xlab = "horsepower")
hist(auto$weight, main = "Weight histogram",  xlab = "weight")
hist(auto$acceleration, main = "Acceleration histogram",  xlab = "acceleration")
hist(as.numeric(auto$model_year), main = "Model year histogram",  xlab = "model_year")
hist(as.numeric(auto$origin), main = "Origin histogram",  xlab = "origin")
hist(auto$mpg, main = "MPG histogram",  xlab = "mpg")
normalizados <- preProcess(auto, method = "range")
auto<-predict(normalizados, auto)
boxplot(auto[,c( "displacement", "horsepower","weight","acceleration", "mpg")])
fit<-lm(mpg~.,data=auto)
summary(fit)
fit2<-lm(mpg~cylinders+horsepower+weight+model_year+origin,data=auto)
summary(fit2)
fit3<-lm(mpg~cylinders+horsepower+weight+model_year+origin+I(horsepower^2)+I(weight^2),data=auto)
summary(fit3)
crime_data <- read_csv("datos/crime_data.csv")
skim(crime_data)
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
crime_data_scaled <- data.frame(cbind(State = crime_data$State, crime_data_))
head(crime_data_scaled,n=5)
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("wss")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Elbow method")
fviz_nbclust(crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape"), kmeans, method = c("gap_stat")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Gap statistic method")
crime_data_scaled
library(knitr)
library(rmdformats)
## Global options
opts_chunk$set(prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
library(readr)
library (Hmisc)
library(corrplot)
library(caret)
library(plyr)
library(GGally)
library(skimr)
library(ggplot2)
library(cluster)
library(dplyr)
library(factoextra)
auto <- read_csv("datos/auto.csv")
skim(auto)
summary(auto)
ggpairs(auto)
auto$origin<-as.factor(auto$origin)
auto$cylinders<-as.factor(auto$cylinders)
auto$model_year<-as.factor(auto$model_year)
ggplot(auto, aes(mpg,fill=cylinders))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=model_year))+geom_histogram(binwidth=1)
ggplot(auto, aes(mpg,fill=origin))+geom_histogram(binwidth=1)
par(mfrow = c(4, 2))
hist(as.numeric(auto$cylinders), main = "Cylinders histogram",  xlab = "cylinders")
hist(auto$displacement, main = "Displacement histogram",  xlab = "displacement")
hist(auto$horsepower, main = "Horsepowe histogram",  xlab = "horsepower")
hist(auto$weight, main = "Weight histogram",  xlab = "weight")
hist(auto$acceleration, main = "Acceleration histogram",  xlab = "acceleration")
hist(as.numeric(auto$model_year), main = "Model year histogram",  xlab = "model_year")
hist(as.numeric(auto$origin), main = "Origin histogram",  xlab = "origin")
hist(auto$mpg, main = "MPG histogram",  xlab = "mpg")
normalizados <- preProcess(auto, method = "range")
auto<-predict(normalizados, auto)
boxplot(auto[,c( "displacement", "horsepower","weight","acceleration", "mpg")])
fit<-lm(mpg~.,data=auto)
summary(fit)
fit2<-lm(mpg~cylinders+horsepower+weight+model_year+origin,data=auto)
summary(fit2)
fit3<-lm(mpg~cylinders+horsepower+weight+model_year+origin+I(horsepower^2)+I(weight^2),data=auto)
summary(fit3)
crime_data <- read_csv("datos/crime_data.csv")
skim(crime_data)
crime_data_ <- scale(crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape"))
crime_data_scaled <- data.frame(cbind(State = crime_data$State, crime_data_))
head(crime_data_scaled,n=5)
cluster_data <- crime_data_scaled %>% select("Murder", "Assault", "UrbanPop", "Rape")
fviz_nbclust(cluster_data, kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(cluster_data, kmeans, method = c("wss")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Elbow method")
fviz_nbclust(cluster_data, kmeans, method = c("gap_stat")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+ labs(subtitle = "Gap statistic method")
colMeans(cluster_data)
cluster_data
is.numeric(cluster_data)
is.numeric(cluster_data)[,1]
is.numeric(cluster_data)[,"Murder"]
is.numeric(cluster_data[,1])
is.numeric(cluster_data[,2])
is.numeric(cluster_data[,3])
is.numeric(cluster_data[,4])
is.numeric(cluster_data[,])
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(km.res, data = my_data, frame.type = "convex")
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(km.res, data = crime_data_scaled, frame.type = "convex")
km.res
fviz_cluster(km.res, data = crime_data, frame.type = "convex")
fviz_cluster(km.res, data = cluster_data, frame.type = "convex")
fviz_cluster(km.res, data = as.numeric(cluster_data), frame.type = "convex")
fviz_cluster(km.res, data = cluster_data, frame.type = "convex")
cluster_data
fviz_cluster(km.res, data = data.frame(cluster_data), frame.type = "convex")
fviz_cluster(km.res, data = as.matrix(cluster_data), frame.type = "convex")
km.res
?fviz_cluster
fviz_cluster(list(data = crime_data_scaled, cluster = km.res$cluster), frame.type = "convex")
fviz_cluster(list(data = cluster_data, cluster = km.res$cluster), data = cluster_data, frame.type = "convex")
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(list(data = cluster_data, cluster = km.res), data = cluster_data, frame.type = "convex")
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(list(data = cluster_data, cluster = km.res), frame.type = "convex")
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(list(data = cluster_data, cluster = km.res$cluster), frame.type = "convex")
cluster_data <- crime_data %>% select("Murder", "Assault", "UrbanPop", "Rape")
fviz_nbclust(cluster_data, kmeans, method = c("silhouette")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Silhouette method")
fviz_nbclust(cluster_data, kmeans, method = c("wss")) + geom_vline(xintercept = 2, linetype=5, col= "darkred")+
labs(subtitle = "Elbow method")
km.res <- kmeans(cluster_data, 3, nstart = 25)
fviz_cluster(list(data = cluster_data, cluster = km.res$cluster), frame.type = "convex")
install.packages("NbClust")
library(NbClust)
set.seed(123)
res.nbclust <- NbClust(cluster_data, distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "complete", index ="all")
kable(km.res$centers)
data.frame(cbind(State = crime_date$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(StatEcdf, collapse = ""))
data.frame(cbind(State = crime_date$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ""))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ""))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", "))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", "))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(Cluster) %>%
select(c("Cluster", "list_of_states"))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(Cluster) %>%
select(c("Cluster", "list_of_states"))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(Cluster)
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(c(Cluster, list_of_states))
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(Cluster) %>%
select(Cluster, .keep_all = TRUE)
data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", ")) %>%
distinct(Cluster, .keep_all = TRUE)
df_list_of_states <- data.frame(cbind(State = crime_data$State, Cluster = km.res$cluster)) %>%
group_by(Cluster) %>%
mutate(list_of_states = paste0(State, collapse = ", "))
df_list_of_states
list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE)
list_of_states
list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states)))
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))%>%
order_by(Cluster))
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))%>%
arrange(Cluster))
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))%>%
arrange(Cluster))%>%
kable_paper("hover", full_width = F)
install.packages("kableExtra")
install.packages("openssl")
install.packages("kableExtra")
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))%>%
arrange(Cluster))%>%
kable_paper("hover", full_width = F)
library(kableExtra)
kable(list_of_states <- df_list_of_states %>%
distinct(Cluster, .keep_all = TRUE) %>%
select(c(Cluster, list_of_states))%>%
arrange(Cluster))%>%
kable_paper("hover", full_width = F)
kable(km.res$centers)%>%
kable_paper("hover", full_width = F)
